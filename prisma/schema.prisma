// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERD
  CANCELLED
}

model User {
  id Int @id @default(autoincrement())
  name String 
  email String @unique
  password String 
  role Role @default(USER)
  defaultShippingAddress  Int?
  defaultBillingAddress Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  addresses Address[]
  cartItems CartItem[]
  orders Order[]

  @@map("users")
}

model Address {
  id Int @id @default(autoincrement())
  userId Int
  line String
  city String
  country String
  pincode String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Category {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products   Product[]

  @@map("categorys")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String @db.Text
  stock Int @default(0)
  price Decimal
  tags String
  categoryId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  orders OrderDetail[]
  reviews ProductReview[]

  category    Category @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductReview {
  id Int @id @default(autoincrement())
  productId Int
  content String?    @db.Text
  attatchFile Bytes?    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("product_reviews")
}

model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  productId Int
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

 @@map("cart_items")
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  amount Decimal
  address String?
  phone  String?
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  details OrderDetail[]
  event OrderEvent[]

  user User @relation(fields: [userId], references: [id])

 @@map("orders")
}

model OrderDetail {
  id Int @id @default(autoincrement())
  orderId Int
  productId Int
  quantity Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  order Order @relation(fields: [orderId], references: [id])

 @@map("order_details")
}

model OrderEvent {
  id Int @id @default(autoincrement())
  orderId Int
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])

 @@map("order_events")
}